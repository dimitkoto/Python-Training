Programirane Python  

URL: fmi.py-bg.net

Alek (с мак-а), Kiril (zaekva), Yoan (бие), Niki

Vtornik i chetvartak ot 19:00

pon - 101
chetv - 200

Plan:

21 feb - intro
23 feb - Python za 1 den (shte ima i obhojdane v shirina)
28 feb - entering test 

feedback location:
fmi-feedback@pybg.net


for styling google for: "pep 8" 

duck typing - better polymorphism - when something looks like duck, it's a duck :)

трябва да изгледаме Monthy Python


mnogo e vajno da se pishat testove - zashtoto nqma statichna tipizaciq
testovete pravqt koda mnogo lesen za poddarjane, chetene, promiana


vsichki sazdateli na ezici imat bradi !! 


import antigravity  --- opens xkcd

help(5) -> console help only
dir(5) -> short help that can be used also in code.
5 is numer so help is for int
type(a) -> shows the variable type

** -> tova e za stepenuvane

""" -> nachalo i krai na mnogoredov string

"int %s sdsd" % "test"  --> interpolacia

"hello, {1}, my name is {0}".format('Ivancho', 'Mariika')

True , False = 1, 0 -> capitals only

True + True == 2

Nonne -> tova e null-a koito e v ostanalite ezici, kogato ne e setnata stoinost

print ('HELLO'.replace('O','W'))

print ('abc' * 2)

x = list()
x = [5,6,]
x.append(7)
x.append('hello')

x.append(x)   -> stava bezkrainost :)

x[3].upper

len(x)  -> daljina na masiva

x * 2   -> umnojava se

x = list(range(0,100))

x[5:10:2]  --> ot 5 do 10 prez 2
x[5:-10] -> ot 5 do 10 predi kraia

x = dict()
x['hello'] = 20
x[5] = 56
x[None] = 'Nothing'
--> kluchove v rechinka moje da sa samo immutable obekti

5 in x  --> vrushta True

if 5 in x:
 print('We have 5!!!!')
 
x.get(3334)

type(x.get(3334)) -> NoneType

hash('hello')
hash(5)

del x[5]    -> trie element ot x
del x     -> trie x
del moje da ne se polzva -> nqma nujda da se chisti nishto 


тюпъл - списък който не може да се променя - ползва се при разни АПИ-та и комуникации с данни.. и т.н.:
x = (1,2,3)

[x * 3 for x in (1,2,3)]    -> [3, 6, 9]


s=set()
s.add(5)
s.add(5) -> dobavqt se samo po vednaj, nqma povtorenia
s.add('ghgh')
s[2]   --> nqma indexirane v set

x.sort()   -> sortirane na mqsto
x[:].sort() -> taka ne se sortira samia spisak a samo negovoto kopie 

s={4,5,6,77,7}
7 in s   --> true

s.remove(7)

l = list(range(0,100))

50 in l    --> True

a = list()    --> ne se definira taka
b = []    -> taka e po-lesno (i barzo)


if 5 in s:
    print('we have a 5')
elif 6 in s:
    print('we have 6')
else:
    print('naaah')
    
        
if 5 not in a:    
    print('no 5')


a=5
b=5
a==b
a is b

a = [1,2,3]
a = [1,2,3]
a == b   -> True
a is b   -> False

x = 5
y = 7
if x == 5 and y == 7:
    print ('yee')

a += 1


x = list(range(0,50))
for val in x:
    print(val)

x = [12,3,4,45,6,6,4567,5,665]
for i in range(0, len(x)):
    print(x[i])
    
x = (4,5,6)

a, b, c = x

a,b = b,a   --> razmiana na promenlivi

for k, v in d.items():
    print(k)
    print(v)
    --> iterrirane na rechnik
    
    
x = 2
while x < 1215:
    print(x)


global variables are evil - they are not accessed within functions, etc.


x = lambda a: a * 5      -> lambda function - simple, onle-line, returning the result even without return
x = (lambda a: a * 2, lambda a: a * 3, lambda a: a * 5 )
x[0](2)    --> 4


def apply(a, f):
    for el in a:
        f(el)
apply(...)

def a(x):
	def b(y):
		return y ** 2
		
    return b
  
a(5)(5)


def foo(a, args*)   --> priema proizvolen broi argumenti
	print(str(len(args)) + ' arguments')
	print(type(args))   --> tuple
	
args* -> proizvolen broi argumenti
kwargs** -> dict, koito se podava taka:

def a(kwargs**):

a("baby" = 5, "daddy" = 'yea')

	
	
def func():
	""" This is the function help 
	
	"""	
return a + b


func()  -> bez parametri shte reve

a = 6
b = 7

func()   -> veche shte varne 13


============= 28.02.2012

Do-obhojdane v shirina -> Klasove, obekti i pitoni 

imame dinamichna tipizacia - imeto print moje da sochi kum druga funkcia, promenliva i t.n.

dir() -- list the loaded modules

create module in dir:
mkdir stuff
touch stuff/__init__.py
vi stuff/prosto.py

then:
import stuff
from stuff import prosto

python libs are in:
/usr/lib/python/lib ? 

__init__   -- konstruktor
__important__  -- important stuff - used by the interpretator
__len__ __iter__ -- dostatachni za iterirane na obekt


============= 01.03.2012 : Miss (Yamato + Opeth)

pep8
comprehensions

============= 06.03.2012

-dobri imena za promenlivite i funkciite:
   da pokazvat za kakvo sluji
   da se spazvat konvenciite
   da se izbiagvat takiva pri koeto lesno se dopuska mispell
   
kohezia - kogato pravim neshto, to trqbva da e maksimalno prosto i da pravi samo edno neshto za koeto e napraveno

state - evil 
use stateless when possible 

ekvivalentnost 
 - observational - da imat ednakvi metodi i poleta
 - behavioral - ako i se darjat ednakvo
 
design by contract - po-dobre da se pishe api kato se probvat neshtata da se puskat predi da se proverqvat, vmesto da se pravqt mnogo proverki predi da se pravi neshto - ako e dokumentirano taka - ne e nash problem veche
  invariant - sastoianie v koeto se namira obekta vav vremeto
  postcondition - neshta koito trqbva da sa izpalneni sled kato se izvika nqkoi metod
  precondition - neshta koito trqbva da sa izpalneni predi da se izvika nqkoi metod

----> knigata "Design Patterns" koi e chel? Mnogo dobra za OOP. The second coming of Jesus.

Naslediavaneto e zlo. 

Kvadrat i Pravoagalnik nqma nujda da se naslediavat. 
Chislata sa sashto taka - prosti, floating point.. etc. sa razlichni i nqma smisal da se nasledqvat

Abstractni klasove - read for ABC 

Try to use GIT (istinska lesna upotreba na branchove?)

do kraia na denia shte ima domashno - srok edna sedmica - do sriada ili chetvartak sledvashtata sedmica

site: http://fmi.py-bg.net
forum: http://fmi.py-bg.net/topics







